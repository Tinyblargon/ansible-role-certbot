---
certbot_used_allow_breaking: >-
  {{ cert_item.allow_breaking | default(certbot_allow_breaking) }}
certbot_used_email: "{{ cert_item.email | default(certbot_email) }}"
certbot_used_ca: "{{ cert_item.ca | default(certbot_ca) }}"
certbot_used_key_curve: "{{ cert_item.key_curve | default(certbot_key_curve) }}"
certbot_used_key_size: "{{ cert_item.key_size | default(certbot_key_size) }}"
certbot_used_key_type: >-
  {{ (cert_item.key_type | default(certbot_key_type)) | lower() }}
certbot_used_post_hook: "{{ cert_item.post_hook | default(certbot_post_hook) }}"
certbot_used_pre_hook: "{{ cert_item.pre_hook | default(certbot_pre_hook) }}"
certbot_used_renew_before_expiry: >-
  {{ cert_item.renew_before_expiry | default(certbot_renew_before_expiry) }}
certbot_used_server: "{{ cert_item.server | default(certbot_server) }}"
certbot_used_test: "{{ cert_item.test | default(certbot_test) }}"

certbot_letsencrypt_valid_key_curve:
  - secp384r1
certbot_valid_key_curve:
  - secp256r1
  - secp384r1
  - secp521r1
certbot_valid_key_size:
  - 2048
  - 3072
  - 4096
certbot_valid_key_type:
  - rsa
  - ecdsa

certbot_regex_pre_hook: "^#?\\s*pre_hook\\s*=.*$"
certbot_regex_post_hook: "^#?\\s*post_hook\\s*=.*$"

certbot_certs_properties: []

certbot_is_ecdsa: "{{ certbot_used_key_type in ['ecc', 'ecdsa'] }}"
certbot_is_rsa: "{{ certbot_used_key_type == 'rsa' }}"

# Selects the certificate from the list of certificates
certbot_select_cert: >-
  {{ certbot_certs_properties |
  selectattr('domain', 'equalto', cert_item.primary_domain) }}

# This condition determens if the certificates are the same
certbot_con_diff: >-
  {{ certbot_select_cert | length == 0
  or certbot_con_diff_domains
  or not certbot_con_same_mode
  or not certbot_con_same_key }}

certbot_con_diff_domains: >-
  {{ (certbot_current_domains | difference(certbot_cert_domains) | length > 0)
  or (certbot_cert_domains | difference(certbot_current_domains) |
  length > 0) }}

certbot_current_domains: >-
  {{ certbot_select_cert.0.crt.subject_alt_name |
  map('regex_replace', '^DNS:', '') | list }}

certbot_cert_domains: >-
  {{ [cert_item.primary_domain] +
  (cert_item.domains if cert_item.domains is defined else []) }}

# Check if the current and the configured certificate are both staging or both production
certbot_con_same_mode: >-
  {{ (certbot_used_test and certbot_con_is_staging)
  or (not certbot_used_test and not certbot_con_is_staging) }}

certbot_con_is_staging: >-
  {{ (certbot_select_cert.0.crt.issuer.organizationName is defined
  and 'staging' in certbot_select_cert.0.crt.issuer.organizationName | lower)
  or (certbot_select_cert.0.crt.issuer.commonName is defined
  and 'staging' in certbot_select_cert.0.crt.issuer.commonName | lower) }}

# Check if the current and the configured certificate have the same key settings
certbot_con_same_key: >-
  {{ certbot_con_same_key_type
  and ((certbot_is_rsa and certbot_con_same_key_size)
  or (certbot_is_ecdsa and certbot_con_same_key_curve)) }}

# Check if the current and the configured certificate have the same key type
certbot_con_same_key_type: >-
  {{ certbot_select_cert.0.crt.public_key_type | lower() == certbot_used_key_type
  or (certbot_select_cert.0.crt.public_key_type | lower() == 'ecc'
  and certbot_is_ecdsa) }}

# Check if the current and the configured certificate have the same key size
certbot_con_same_key_size: >-
  {{ certbot_select_cert.0.crt.public_key_data.size is defined
  and certbot_select_cert.0.crt.public_key_data.size |
  int == certbot_used_key_size | int }}

# Check if the current and the configured certificate have the same key curve
certbot_con_same_key_curve: >-
  {{ certbot_select_cert.0.crt.public_key_data.curve is defined
  and certbot_select_cert.0.crt.public_key_data.curve == certbot_used_key_curve }}

certbot_con_cert_item_absent: >-
  {{ cert_item.state is defined and cert_item.state == 'absent' }}

# list of certificate names to remove
certbot_remove_certs: >-
  {{ (certbot_list_certs_installed
    | intersect(certbot_list_certs_absent_primary_domain))
    + certbot_list_certs_unknown if certbot_remove_unknown else [] }}

# return a list of certbot_certs.primary_domain regardless of the state
certbot_list_certs_primary_domain: >-
  {{ certbot_certs | map(attribute='primary_domain') | list }}

# return a list of certbot_certs objects the certificates where state:'absent'
certbot_list_certs_absent: >-
  {{ certbot_certs | selectattr('state', 'defined')
    | selectattr('state', 'equalto', 'absent') }}

# returns primary_domain: certbot_list_certs_absent:
certbot_list_certs_absent_primary_domain: >-
  {{ certbot_list_certs_absent | map(attribute='primary_domain') | list }}

# return a list of certbot_certs objects the certificates where state: is undefined or 'present'
certbot_list_certs_present: >-
  {{ (certbot_certs | selectattr('state', 'undefined'))
    + (certbot_certs | selectattr('state', 'defined')
    | selectattr('state', 'equalto', 'present')) }}

# return a list of certbot_certs objects the certificates where state: is undefined or 'present' and the primary_domain is in the list of installed certificates
certbot_list_certs_present_existing: >-
  {{ certbot_list_certs_present
  | selectattr('primary_domain', 'in',
    certbot_certs_properties | map(attribute='domain') | list) | list}}

# return a list of certbot_certs objects the certificates where state: is undefined or 'present' and the primary_domain is not in the list of installed certificates
certbot_list_certs_present_not_existing: >-
  {{ certbot_list_certs_present
  | rejectattr('primary_domain', 'in',
    certbot_certs_properties | map(attribute='domain') | list) | list}}

# returns a list of domains that are installed
certbot_list_certs_installed: >-
  {{ (certbot_certs_properties | map(attribute='domain'))
    if certbot_certs_properties | length > 0
    else [] }}

certbot_list_certs_unknown: >-
  {{ certbot_list_certs_installed
    | difference(certbot_list_certs_primary_domain) }}

# Error for the asserts
certbot_failed_domains: >-
  for the following domains:
  {{ ansible_failed_result.results | selectattr('failed', 'defined') |
  selectattr('failed', 'equalto', true) | map(attribute='_ansible_item_label') |
  list }}
