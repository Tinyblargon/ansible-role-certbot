---
- name: Ensure certbot is installed
  ansible.builtin.apt:
    name: certbot
    state: present
    cache_valid_time: 3600

- name: Install Certbot plugin
  ansible.builtin.package:
    name: python3-certbot-{{ certbot_request_method }}
    state: present
  when: certbot_request_method in ["nginx", "apache"]

- name: List all certificates
  ansible.builtin.command:
    cmd: "{{ certbot_script }} certificates"
  register: certbot_available_certs
  changed_when: false

- name: Get certificate properties
  ansible.builtin.include_tasks:
    file: check-cert.ansible.yml
  with_items: >-
    {{ certbot_available_certs.stdout |
    regex_findall('Certificate Path: (.+[^\n])') | list }}
  loop_control:
    loop_var: fullchain_item

- name: Remove certificates
  ansible.builtin.command:
    cmd: "{{ certbot_remove_command }}"
  loop: "{{ certbot_remove_certs }}"
  changed_when: true

- name: Update pre hook for existing certificates
  ansible.builtin.lineinfile:
    path: "/etc/letsencrypt/renewal/{{ cert_item.primary_domain }}.conf"
    regexp: "{{ certbot_regex_pre_hook }}"
    line: "pre_hook = '{{ certbot_used_pre_hook }}'"
    insertafter: "[renewalparams]"
    state: >-
      {{ (certbot_used_pre_hook != '') | ternary('present', 'absent') }}
  with_items: "{{ certbot_list_certs_present_existing }}"
  loop_control:
    loop_var: cert_item
    label: "{{ cert_item.primary_domain }}"

- name: Update post hook for existing certificates
  ansible.builtin.lineinfile:
    path: "/etc/letsencrypt/renewal/{{ cert_item.primary_domain }}.conf"
    regexp: "{{ certbot_regex_post_hook }}"
    line: "post_hook = '{{ certbot_used_post_hook }}'"
    insertafter: "[renewalparams]"
    state: >-
      {{ (certbot_used_post_hook != '') | ternary('present', 'absent') }}
  with_items: "{{ certbot_list_certs_present_existing }}"
  loop_control:
    loop_var: cert_item
    label: "{{ cert_item.primary_domain }}"

- name: Request certificates
  ansible.builtin.include_tasks:
    file: request-cert.ansible.yml
  with_items: "{{ certbot_certs }}"
  loop_control:
    loop_var: cert_item
    label: "{{ cert_item.primary_domain }}"
  when: certbot_con_diff
    and not certbot_con_cert_item_absent

- name: Update pre hook for new certificates
  ansible.builtin.lineinfile:
    path: "/etc/letsencrypt/renewal/{{ cert_item.primary_domain }}.conf"
    regexp: "{{ certbot_regex_pre_hook }}"
    line: "pre_hook = '{{ certbot_used_pre_hook }}'"
    insertafter: "[renewalparams]"
    state: >-
      {{ (certbot_used_pre_hook != '') | ternary('present', 'absent') }}
  with_items: "{{ certbot_list_certs_present_not_existing }}"
  loop_control:
    loop_var: cert_item
    label: "{{ cert_item.primary_domain }}"

- name: Update post hook for new certificates
  ansible.builtin.lineinfile:
    path: "/etc/letsencrypt/renewal/{{ cert_item.primary_domain }}.conf"
    regexp: "{{ certbot_regex_post_hook }}"
    line: "post_hook = '{{ certbot_used_post_hook }}'"
    insertafter: "[renewalparams]"
    state: >-
      {{ (certbot_used_post_hook != '') | ternary('present', 'absent') }}
  with_items: "{{ certbot_list_certs_present_not_existing }}"
  loop_control:
    loop_var: cert_item
    label: "{{ cert_item.primary_domain }}"

- name: Update renew_before_expiry in letsencrypt renewal configuration
  ansible.builtin.lineinfile:
    path: "/etc/letsencrypt/renewal/{{ cert_item.primary_domain }}.conf"
    regexp: "^(#?\\s*renew_before_expiry\\s*=.*)$"
    line: "{{ certbot_hashtag }}renew_before_expiry = {{ certbot_days }}"
    insertbefore: BOF
  vars:
    certbot_hashtag: >-
      {{ '' if certbot_used_renew_before_expiry | int > 0 else '# ' }}
    certbot_days: "{{ certbot_used_renew_before_expiry }} days"
  with_items: "{{ certbot_list_certs_present }}"
  loop_control:
    loop_var: cert_item
    label: "{{ cert_item.primary_domain }}"
